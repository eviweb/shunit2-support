#! /bin/bash
DIR=$(dirname $(readlink -f "$BASH_SOURCE"))
MAINDIR=$(dirname "${DIR}")
TPLDIR="${DIR}/templates"
UPDDIR="${DIR}/updates"

# shunit2 support usage
usage() {
    echo "
    Usage:
        ./sshunit2 [OPTIONS]
    Options:
        -p path/to/project  initialize a project with shunit2 support enabled
        -t command_name     create a unit test file for command_name
        -i                  enable shunit2 support in the current directory
        -s                  create a test suite runner in ./tests directory
        -U file_or_dir      update old unit test files with new version templates
        -h                  display this message
    shunit2 support command
"
}

checkTarget()
{
    local target="$1"
    local message="$2"

    if [ -e "${target}" ]; then
        echo "${message}" >&2
        exit 1
    fi
}

checkShunit2Support()
{
    if [ ! -e "$PWD/lib/shunit2/source/2.1/src/shunit2" ]; then
        echo "Shunit2 support is not enabled in the current directory" >&2
        exit 1
    fi
}

createDirectoryIfNotExist()
{
    local dir="$1"

    if [ ! -e "${dir}" ]; then
        mkdir -p "${dir}"
    fi
}

newProject()
{
    local target_dir="$1"

    checkTarget "$OPTARG" "The target directory already exists"
    mkdir -p "${target_dir}/src"
    mkdir -p "${target_dir}/tests"
    cd "${target_dir}"
    enableShunit2Support
}

newTest()
{
    local test_file="tests/$1_test.sh"
    local dir=$(dirname "${test_file}")

    checkShunit2Support
    createDirectoryIfNotExist "${dir}"

    cat "${TPLDIR}/header.tpl" > "${test_file}"
    cat "${TPLDIR}/footer.tpl" >> "${test_file}"
    tagWithVersion "${test_file}"
    chmod +x "${test_file}"
}

newTestSuite()
{
    local test_suite="tests/testsuite.sh"
    local dir=$(dirname "${test_suite}")

    checkTarget "${test_suite}" "A test suite runner already exists"
    createDirectoryIfNotExist "${dir}"    

    cat "${TPLDIR}/suite.tpl" > "${test_suite}"
    tagWithVersion "${test_suite}"
    chmod +x "${test_suite}"
}

enableShunit2Support()
{
    [ ! -e "$PWD/.git" ] && git init
    git submodule add --name shunit2 https://github.com/kward/shunit2.git lib/shunit2
}

updateTests()
{
    local files=()

    if [ -f "$1" ]; then
        files=( "$1" )
    else
        files=( $(find $1 -type f \( -iname "*_test.sh" ! -path "*/fixtures/*" \)) )
    fi

    for upd in ${UPDDIR}/*; do
        . ${upd}
        for file in ${files[@]}; do
            local curversion="$(currentVersion)"
            local oldversion="$(getVersionFromFile ${file})"

            if [ $(compareVersion "${curversion}" "${oldversion}") -eq 1 ]; then
                update "${file}"
            fi
        done
    done
}

updateTestSuite()
{
    local file="$1"
    
    if [ -d "$1" ]; then
        file="$(find $1 -type f \( -iname "testsuite.sh" ! -path "*/fixtures/*" \))"
    fi

    if [ -e "${file}" ]; then
        local curversion="$(currentVersion)"
        local oldversion="$(getVersionFromFile ${file})"

        if [ $(compareVersion "${curversion}" "${oldversion}") -eq 1 ]; then
            unlink "${file}"
            newTestSuite
        fi
    fi
}

doUpdate()
{
    if [ -d "$1" ]; then
        updateTests "$1"
        updateTestSuite "$1"
    elif echo "$1" | grep "_test.sh" > /dev/null; then
        updateTests "$1"
    elif echo "$1" | grep "testsuite.sh" > /dev/null; then
        updateTestSuite "$1"
    fi
}

tagWithVersion()
{
    echo "# version: $(cat ${MAINDIR}/VERSION)" >> "$1"
}

compareVersion()
{
    local curversion="$1"
    local oldversion="$2"
    [ -z "${oldversion}" ] && oldversion="0.1.0"
    export VERSION_FILE="${MAINDIR}/VERSION"

    ${MAINDIR}/lib/semver-tool/src/semver compare "${curversion}" "${oldversion}"
}

currentVersion()
{
    cat "${MAINDIR}/VERSION"
}

getVersionFromFile()
{
    local file="$1"
    local pattern="\d+\.\d+\.\d+\-*.*"

    grep -Poe "# version: ${pattern}" ${file} | grep -Poe "${pattern}"
}

OPTIONS=":hisp:t:U:"
# get command line options
while getopts $OPTIONS option
do
    case $option in
        p) newProject "$OPTARG";;
        t) newTest "$OPTARG";;
        s) newTestSuite;;
        i) enableShunit2Support;;
        U) doUpdate "$OPTARG";;
        *) usage && exit 1;;
    esac
done
shift $(($OPTIND - 1 ))